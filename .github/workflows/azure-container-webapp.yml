# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Deploy all moving parts of capstone
env:
  AZURE_WEBAPP_NAME: ${{ vars.AZURE_WEBAPP_NAME }}  # set this to the name of your Azure Web App
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Setup docker-compose
        run: sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
      - name: Make docker-compose binaries executable
        run: sudo chmod +x /usr/local/bin/docker-compose

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Login to the ACR server
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_REGISTRY_SERVER }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
          
      - name: Build with docker compose
        env: 
          URL: ${{ secrets.DB_URL}}
          USERNAME: ${{ secrets.DB_USERNAME }}
          PSWD: ${{ secrets.DB_PSWD }}
          PGQL_HOST: ${{ secrets.PGQL_HOST }}
          PGQL_PORT: ${{ secrets.PGQL_PORT }}
          PGQL_USERNAME: ${{ secrets.PGQL_USERNAME }}
          PGQL_PASSWORD: ${{ secrets.PGQL_PASSWORD }}
          PGQL_DATABASE: ${{ secrets.PGQL_DATABASE }}
          MG_URL: ${{ secrets.MG_URL }}
          AZURE_REGISTRY_SERVER: ${{ secrets.AZURE_REGISTRY_SERVER }}
        run: |
         docker-compose build \
         --build-arg URL=$DB_URL \
         --build-arg USERNAME=$DB_USERNAME \
         --build-arg PSWD=$DB_PSWD \
         --build-arg PGQL_HOST=$PGQL_HOST \
         --build-arg PGQL_PORT=$PGQL_PORT \
         --build-arg PGQL_USERNAME=$PGQL_USERNAME \
         --build-arg PGQL_PASSWORD=$PGQL_PASSWORD \
         --build-arg PGQL_DATABASE=$PGQL_DATABASE \
         --build-arg MG_URL=$MG_URL \
         --build-arg AZURE_REGISTRY_SERVER=$AZURE_REGISTRY_SERVER
        
      - name: Push Docker image to ACR
        run: docker push ${{ secrets.AZURE_REGISTRY_SERVER }}/courseapi:latest \
      - name: Push Docker image to ACR
        run: docker push ${{ secrets.AZURE_REGISTRY_SERVER }}/micro-services-pg2mong:latest \
      - name: Push Docker image to ACR
        run: docker push ${{ secrets.AZURE_REGISTRY_SERVER }}/fpbe:latest \
      - name: Push Docker image to ACR
        run: docker push ${{ secrets.AZURE_REGISTRY_SERVER }}/fpfe:latest



  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: none

    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - name: Install azure-cli
        uses: pietrobolcato/install-azure-cli-action@v1.0.1
        
      - name: Azure Login
        uses: Azure/login@v1.4.6
        with:
         client-id: ${{ secrets.CLIENT_ID }}
         tenant-id: ${{ secrets.TENANT_ID }}
        

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          configuration-file: ./docker-compose.yaml
          images: |
           ${{ secrets.AZURE_REGISTRY_SERVER }}/courseapi:latest
           ${{ secrets.AZURE_REGISTRY_SERVER }}/micro-services-pg2mong:latest
           ${{ secrets.AZURE_REGISTRY_SERVER }}/fpbe:latest
           ${{ secrets.AZURE_REGISTRY_SERVER }}/fpfe:latest
          
           
