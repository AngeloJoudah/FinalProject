
apiVersion: v1
kind: ConfigMap
metadata:
  name: kaf-cfg
data:
  kafka-config.properties: |
    auto.create.topics.enable=true
    default.replication.factor=1
    spring.kafka.consumer.auto-offset-reset=earliest

---
apiVersion: v1
kind: Secret
metadata:
  name: azure-storage-secret
type: Opaque
data:
  azurestorageaccountname: YWtzcGVyc2lzdGFuY2UNCg==
  azurestorageaccountkey: NfB29wYRXRStG4MlYK4zy3ah9TKEm05e5fjlclX3a7Y74owEm0uj7T7XzRAP47TqC/orZRKcZgDb+AStHrF0Qw==
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: azure-file-pv
  annotations:
    pv.kubernetes.io/provisioned-by: file.csi.azure.com
spec:
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  csi:
    driver: file.csi.azure.com
    readOnly: false
    volumeHandle: unique-volumeid  # make sure this volumeid is unique for every identical share in the cluster
    volumeAttributes:
      shareName: aksshare
    nodeStageSecretRef:
      name: azure-storage-secret
      namespace: default
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-file-pvc
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile-csi
  resources:
    requests:
      storage: 100Gi 
---
apiVersion: v1
kind: Secret
metadata:
 name: acr-secret
type: Opaque
data: 
 docker-server: cHNkZW1vYWNyYW5nZWxvLmF6dXJlY3IuaW8NCg==
 docker-username: cHNkZW1vYWNyYW5nZWxvDQo=
 docker-password: VTBvNk5rdit2Yzd3ZUVLUk55bXJ4Mjg2ZjZEc3VZWlFUZy93TG04Q3R2K0FDUkNrbGtTSg0K
---
apiVersion: v1
kind: Secret
metadata:
 name: postgresql-params
type: Opaque
data:
 jdbc_url: amRiYzpwb3N0Z3Jlc3FsOi8vZnBiZXBncWwucG9zdGdyZXMuZGF0YWJhc2UuYXp1cmUuY29tOjU0MzIvY3N0 
 host: ZnBiZXBncWwucG9zdGdyZXMuZGF0YWJhc2UuYXp1cmUuY29t
 port: NTQzMg==
 username: QW5nZWxv
 password: QmVsbGE1MTQh
 database: Y3N0
---
apiVersion: v1
kind: Secret
metadata:
 name: mongo-params
type: Opaque
data:
 url: bW9uZ29kYjovL2RvY2RiZnA6T2xzNXlFNUdxdm4waWt5emNSa2NjQWE4SEM3Z3E4QVNObTMyOXNkcHVhSktFbDE1cnV1eFYyNmZqNEgzQlZhbGM0VGZPeE83V3pTR0FDRGJ0QnUxaUE9PUBkb2NkYmZwLm1vbmdvLmNvc21vcy5henVyZS5jb206MTAyNTUvP3NzbD10cnVlJnJlcGxpY2FTZXQ9Z2xvYmFsZGImcmV0cnl3cml0ZXM9ZmFsc2UmbWF4SWRsZVRpbWVNUz0xMjAwMDAmYXBwTmFtZT1AZG9jZGJmcEA=
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
spec:
  selector:
    app: zookeeper
  ports:
    - name: client
      protocol: TCP
      port: 2181
      targetPort: 2181
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
spec:
  serviceName: zookeeper-service
  replicas: 3
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:latest
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
          ports:
            - containerPort: 2181

          #volumeMounts:
          #  - name: azure-file-volume
          #    mountPath: /var/lib/zookeeper/data
      #volumes:
      #- name: azure-file-volume
      #  persistentVolumeClaim:
      #    claimName: azure-file-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service-0
spec:
  selector:
    app: kafka
  ports:
    - name: kafka
      protocol: TCP
      port: 9092
      targetPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service-1
spec:
  selector:
    app: kafka
  ports:
    - name: kafka
      protocol: TCP
      port: 9092
      targetPort: 9092
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service-2
spec:
  selector:
    app: kafka
  ports:
    - name: kafka
      protocol: TCP
      port: 9092
      targetPort: 9092
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-0
spec:
  serviceName: kafka-service-0
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:latest
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper-0.zookeeper-service.default.svc.cluster.local:2181
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://kafka-service-0.default.svc.cluster.local:9092
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_OPTS
              value: -Dconfig.file=/etc/kafka/secrets/kafka-config.properties
          volumeMounts:
            - name: kafka-config
              mountPath: /etc/kafka/secrets
      volumes:
        - name: kafka-config
          configMap:
            name: kaf-cfg
            items:
            - key: kafka-config.properties
              path: kafka-config.properties
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-1
spec:
  serviceName: kafka-service-1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:latest
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper-1.zookeeper-service.default.svc.cluster.local:2181
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://kafka-service-1.default.svc.cluster.local:9092 
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_OPTS
              value: -Dconfig.file=/etc/kafka/secrets/kafka-config.properties
          volumeMounts:
            - name: kafka-config
              mountPath: /etc/kafka/secrets/
      volumes:
        - name: kafka-config
          configMap:
            name: kaf-cfg
            items:
            - key: kafka-config.properties
              path: kafka-config.properties
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-2
spec:
  serviceName: kafka-service-2
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:latest
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper-2.zookeeper-service.default.svc.cluster.local:2181
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://kafka-service-2.default.svc.cluster.local:9092
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_OPTS
              value: -Dconfig.file=/etc/kafka/secrets/kafka-config.properties
          volumeMounts:
            - name: kafka-config
              mountPath: /etc/kafka/secrets
      volumes:
        - name: kafka-config
          configMap:
            name: kaf-cfg
            items:
            - key: kafka-config.properties
              path: kafka-config.properties
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
 name: webapp-deployment
 labels:
  app: webapp
spec:
 replicas: 1
 selector:
  matchLabels:
   app: webapp
 template:
  metadata:
    labels:
      app: webapp
  spec:
    containers:
    - name: frontend
      image: psdemoacrangelo.azurecr.io/fpfe:latest
      ports:
      - containerPort: 80
        protocol: TCP
        name: http
    - name: course-api
      image: psdemoacrangelo.azurecr.io/courseapi:latest
      env:
      - name: MG_URL
        valueFrom:
          secretKeyRef:
            name: mongo-params
            key: url
      ports:
      - containerPort: 8081

    - name: kafka
      image: psdemoacrangelo.azurecr.io/kafka:latest
      env:
      - name: KAFKA_SERVER
        value: kafka-service-0.default.svc.cluster.local:9092,kafka-service-1.default.svc.cluster.local:9092,kafka-service-2.default.svc.cluster.local:9092
      ports:
      - containerPort: 8082

    - name: user-api
      image: psdemoacrangelo.azurecr.io/fpbe:latest
      env:
      - name: URL
        valueFrom:
         secretKeyRef:
          name: postgresql-params
          key: jdbc_url
      - name: USERNAME
        valueFrom:
         secretKeyRef:
          name: postgresql-params
          key: username
      - name: PSWD
        valueFrom:
         secretKeyRef:
          name: postgresql-params
          key: password
      ports:
      - containerPort: 8080
    - name: micro-services-pg2mongo
      image: psdemoacrangelo.azurecr.io/micro-services-pg2mong:latest
      env:
      - name: MG_URL
        valueFrom:
          secretKeyRef:
            name: mongo-params
            key: url
      - name: PGQL_HOST
        valueFrom:
          secretKeyRef:
            name: postgresql-params
            key: host
      - name: PGQL_PORT
        valueFrom:
          secretKeyRef:
            name: postgresql-params
            key: port
      - name: PGQL_USERNAME
        valueFrom:
          secretKeyRef:
            name: postgresql-params
            key: username
      - name: PGQL_PASSWORD
        valueFrom:
          secretKeyRef:
            name: postgresql-params
            key: password
      - name: PGQL_DATABASE
        valueFrom:
          secretKeyRef:
            name: postgresql-params
            key: database

    imagePullSecrets:
    - name: acr-secret
---
apiVersion: v1
kind: Service
metadata:
 name: webapp-service
 #annotations:
 # service.beta.kubernetes.io/azure-load-balancer-ipv4: 20.33.12.51
 labels:
   app: webapp
   
spec:
 type: LoadBalancer
 #loadBalancerIP: 20.121.73.181
 selector:
   app: webapp
 ports:
   - name: http
     protocol: TCP
     port: 80
     targetPort: 80
   - name: api-v1
     protocol: TCP
     port: 8080
     targetPort: 8080
   - name: api-v2
     protocol: TCP
     port: 8081
     targetPort: 8081
   - name: api-v3
     protocol: TCP
     port: 8082
     targetPort: 8082

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  #annotations:
  #  kubernetes.io/ingress.class: azure/application-gateway
spec:
  #ingressClassName: azure-application-gateway
  rules:
   #- host: ofcourse.website
   - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webapp-service
            port:
              number: 80
      - path: /api/v1/*
        pathType: Prefix
        backend:
          service:
            name: webapp-service
            port: 
              number: 8080
      - path: /api/v2/*
        pathType: Prefix
        backend:
          service:
            name: webapp-service
            port: 
              number: 8081
      - path: /api/v3/*
        pathType: Prefix
        backend:
          service:
            name: webapp-service
            port: 
              number: 8082
